// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/controller/flows (interfaces: Flow)
//
// Generated by this command:
//
//	mockgen -destination ./mocks/mock_flow.go -package mocks -mock_names Flow=MockFlow ./internal/controller/flows Flow
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockFlow is a mock of Flow interface.
type MockFlow struct {
	ctrl     *gomock.Controller
	recorder *MockFlowMockRecorder
	isgomock struct{}
}

// MockFlowMockRecorder is the mock recorder for MockFlow.
type MockFlowMockRecorder struct {
	mock *MockFlow
}

// NewMockFlow creates a new mock instance.
func NewMockFlow(ctrl *gomock.Controller) *MockFlow {
	mock := &MockFlow{ctrl: ctrl}
	mock.recorder = &MockFlowMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFlow) EXPECT() *MockFlowMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockFlow) Run(ctx context.Context, item any) (any, []string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx, item)
	ret0, _ := ret[0].(any)
	ret1, _ := ret[1].([]string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Run indicates an expected call of Run.
func (mr *MockFlowMockRecorder) Run(ctx, item any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockFlow)(nil).Run), ctx, item)
}
